// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum VerificationType {
  RESISTER
  RESET_PASSWORD
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  likedPhotos   String[]  @default([])
  collections   Collection[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Verification {
  token       String    @unique
  name        String?
  email       String    @unique
  password    String?
  expires_at  DateTime
}

model Photo {
  id                String           @id
  slug              String
  alternative_slugs Json
  width             Int
  height            Int
  description       String?
  alt_description   String?
  urls              Json
  links             Json
  likes             Int
  liked_by_user     Boolean
  views             Int
  downloads         Int
  tags              TagOnPhotos[]
  tags_preview      TagPreview[]
  topics            TopicOnPhotos[]
  collections       CollectionOnPhotos[]

}

model Tag {
  id        String   @id @default(cuid())
  type      String
  title     String   @unique
  photos    TagOnPhotos[]
}

model TagPreview {
  id        String   @id @default(cuid())
  type      String
  title     String
  photoId   String
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model Topic {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  photos    TopicOnPhotos[]
}

model TagOnPhotos {
  id        Int      @id @default(autoincrement())
  photoId   String
  tagId     String
  photo     Photo    @relation(fields: [photoId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
}

model TopicOnPhotos {
  id        Int      @id @default(autoincrement())
  photoId   String
  topicId   String
  photo     Photo    @relation(fields: [photoId], references: [id])
  topic     Topic    @relation(fields: [topicId], references: [id])
}

model Collection {
  id        String           @id @default(cuid())
  title     String           
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos    CollectionOnPhotos[]  
}

model CollectionOnPhotos {
  id          Int      @id @default(autoincrement())
  photoId     String
  collectionId String
  collection  Collection @relation(fields: [collectionId], references: [id])
  photo       Photo      @relation(fields: [photoId], references: [id])

  @@unique([photoId, collectionId])
}


